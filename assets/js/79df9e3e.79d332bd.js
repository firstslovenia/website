"use strict";(self.webpackChunkftcwebsite=self.webpackChunkftcwebsite||[]).push([[7575],{5735:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/telemetry-graph-power-9e21c552cd56345ea0448f4dd18ae535.png"},6370:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"ftctui/graphs-with-telemetry","title":"Creating graphs with dumped telemetry data","description":"Passing the command-line option -e or --export-telemetry, will dump all received telemetry packets into a file called telemetry_log.json in the active directory.","source":"@site/projects/ftctui/graphs-with-telemetry.md","sourceDirName":"ftctui","slug":"/ftctui/graphs-with-telemetry","permalink":"/docs/ftctui/graphs-with-telemetry","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"projectsSidebar","previous":{"title":"Command-line arguments","permalink":"/docs/ftctui/command-line-arguments"},"next":{"title":"Project Strand","permalink":"/docs/project-strand/"}}');var o=n(4848),s=n(8453);const r={sidebar_position:3},i="Creating graphs with dumped telemetry data",l={},d=[];function p(e){const t={a:"a",code:"code",h1:"h1",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"creating-graphs-with-dumped-telemetry-data",children:"Creating graphs with dumped telemetry data"})}),"\n",(0,o.jsxs)(t.p,{children:["Passing the ",(0,o.jsx)(t.a,{href:"command-line-arguments",children:"command-line option"})," ",(0,o.jsx)(t.code,{children:"-e"})," or ",(0,o.jsx)(t.code,{children:"--export-telemetry"}),", will dump all received telemetry packets into a file called ",(0,o.jsx)(t.code,{children:"telemetry_log.json"})," in the active directory."]}),"\n",(0,o.jsx)(t.p,{children:"This file's structure looks like"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-json",children:'[\n\t{"t_elapsed_ms":3257,"entries":{"Telemetry key": "value", "Some otherkey": "1.0", ...},\n\t...\n]\n'})}),"\n",(0,o.jsx)(t.p,{children:"Note that:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Not all elements of the array of telemetry packets contain your custom defined values. Some will only contain keys that are added by REV, such as ",(0,o.jsx)(t.code,{children:"$System$Warning$"}),", ",(0,o.jsx)(t.code,{children:"$System$None$"}),", and ",(0,o.jsx)(t.code,{children:"Status"}),". ",(0,o.jsx)(t.code,{children:"Battery Voltage [V]"})," is also a special one, which contains the last reported voltage on the battery."]}),"\n",(0,o.jsx)(t.li,{children:"All values are sent as strings, regardless of their actual type. You'll need to manually parse them"}),"\n",(0,o.jsxs)(t.li,{children:["Certain telemetry entries will have weird keys, such as ",(0,o.jsx)(t.code,{children:"\\u0000\u0184"}),". These keys (starting with a unicode null character) are used for telemetry lines (telemetry values that have no key)"]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"You can then parse this file in e.g. python, to draw a graph with matplotlib:"}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"Graph of motor power",src:n(5735).A+"",width:"1459",height:"992"})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"Graph of a pid control system",src:n(9663).A+"",width:"1487",height:"906"})}),"\n",(0,o.jsx)(t.p,{children:"Example code:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'import matplotlib.pyplot as plt;\nimport sys\nimport json\n\n# sys.argv[1] means we\'ll open the file passed\n# as our second argument\n#\n# You\'ll run this as python3 main.py myfile.json\nwith open(sys.argv[1], \'r\') as file:\n\n\t# Read the file and parse it as json\n\tdata = file.read();\n\tparsed = json.loads(data);\n\n\t# Let\'s say we want to graph our motor power over time\n\t# and we have a line in our robot\'s code:\n\t# telemetry.addData("Motor power", motorPower);\n\t# where motorPower is a float, from -1.0 to 1.0\n\tpower = list();\n\n\ttime = list();\n\n\t# these two lists need to have the same number of elements, and the nth element in one\n\t# has to correspond to the nth element in the other\n\n\tfor packet in parsed:\n\n\t\t# For the values of time, take every packet\'s time in seconds\n\t\t#\n\t\t# We\'ll map all our y values to this; this is so matplotlib knows at what time we received what data\n\t\ttime.append(float(packet["t_elapsed_ms"]) / 1000.0);\n\n\t\t# Potentially get the value from the packet\'s entries\n\t\tpower_e = entry["entries"].get("Motor power")\n\n\t\t# If the entry contained that value\n\t\tif power_e is not None:\n\n\t\t\tpower_as_float = float(power_e)\n\n\t\t\t# This is optional, map values of (-1.0, 1.0) to (-100.0, 100.0)\n\t\t\t# This is to show how you can manipulate data before adding it to the list\n\t\t\tpower_as_float = power_as_float * 100.0;\n\n\t\t\tpower.append(power_as_float)\n\t\telse:\n\t\t\t# If it didn\'t, let matplotlib know\n\t\t\t# If we didn\'t append None here, we\'d mess up the 1 - 1 mapping of power to time\n\t\t\tpower.append(None)\n\n\tfig, ax = plt.subplots();\n\n\tax.plot(time, power, linewidth=3, label="Motor power [%]");\n\t# If you want to add more plots, add another list, add its elements in the above loop, then call\n\t# ax.plot(time, my_data, label="Something")\n\n\t# These just make things look a bit nicer, ax.legend() is very useful\n\t#\n\t# plt.show() actually shows the graph\n\t#\n\t# you should take a look at matplotlib\'s docs\n\tax.set_xlabel("Time [s]");\n\tax.set_title("Telemetry");\n\tax.legend();\n\tax.grid(True)\n\tplt.show();\n'})})]})}function c(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>i});var a=n(6540);const o={},s=a.createContext(o);function r(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(s.Provider,{value:t},e.children)}},9663:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/telemetry-graph-pid-ca016e2979fa6d464b643fa78883a97b.png"}}]);